%===============================================================================
%                       ┌─┐┌─┐┌┐┌    ┌─┐┌─┐┬─┐┬  ┬┌─┐┬─┐
%                       │ ┬├┤ │││    └─┐├┤ ├┬┘└┐┌┘├┤ ├┬┘
%                       └─┘└─┘┘└┘────└─┘└─┘┴└─ └┘ └─┘┴└─
%                                  TCP ECHO
%                               Callback module
%===============================================================================

-module(tcp_echo_server).

-behaviour(gen_server).

%===============================================================================
%                                   INCLUDES
%===============================================================================

% -include_lib("eunit/include/eunit.hrl").
% -include_lib("kernel/include/logger.hrl").

%===============================================================================
%                                    MACROS
%===============================================================================

-define(SERVER,       ?MODULE).
-define(DEFAULT_PORT, 1055).

%===============================================================================
%                                     DATA
%===============================================================================

-record(state, {port, lsock}).

%===============================================================================
%                                  PUBLIC API 
%===============================================================================

-export([start_link/0,
         start_link/1]).

%===============================================================================
%                             GEN_SERVER CALLBACKS
%===============================================================================

-export([code_change/3,
         handle_call/3,
         handle_cast/2,
         handle_continue/2,
         handle_info/2,
         terminate/2,
         init/1]).

%===============================================================================
%                                  PUBLIC API 
%===============================================================================

%-------------------------------------------------------------------------------
% START_LINK/0
%
% @doc
% Start tcp_echo_server on the default port (1055).
% @end
%-------------------------------------------------------------------------------
-spec start_link() -> {ok, pid()} |
                      ignore |
                      {error, {already_started,  pid()}} |
                      {error, term()}.
%-------------------------------------------------------------------------------
start_link() ->
    start_link(?DEFAULT_PORT).

%-------------------------------------------------------------------------------
% START_LINK/0
%
% @doc
% Start tcp_echo_server on PORT.
% @end
%-------------------------------------------------------------------------------
-spec start_link(Port :: integer()) -> {ok, Pid :: pid()} | 
                                       ignore | 
                                       {error, {already_started, Pid :: pid()}} | 
                                       {error, Error :: term()}.
%-------------------------------------------------------------------------------
start_link(Port) ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [Port], []).


%===============================================================================
%                             GEN_SERVER CALLBACKS
%===============================================================================

%-------------------------------------------------------------------------------
% INIT/1
%
%-------------------------------------------------------------------------------
-spec init(Args :: [integer()]) -> {ok, #state{}, {continue, init}}.
%-------------------------------------------------------------------------------
init([Port]) ->
    {ok, LSock} = gen_tcp:listen(Port, [{active, true}]),
    {ok, #state{port = Port, lsock = LSock}, {continue, init}}.


%-------------------------------------------------------------------------------
% HANDLE_CONTINUE/2
%
%-------------------------------------------------------------------------------
-spec handle_continue(term(), term()) -> {noreply, term()}.
%-------------------------------------------------------------------------------
handle_continue(init, #state{lsock = LSock} = State) ->
    {ok, _Sock} = gen_tcp:accept(LSock),
    {noreply, State}.

%-------------------------------------------------------------------------------
% HANDLE_CALL/3
%
%-------------------------------------------------------------------------------
-spec handle_call(term(), {pid(), term()}, term()) -> {reply, ignored, #state{}}.
%-------------------------------------------------------------------------------
handle_call(_Request, _From, State) -> 
    {reply, ignored, State}.

%-------------------------------------------------------------------------------
% HANDLE_CAST/2
%
%-------------------------------------------------------------------------------
-spec handle_cast(term(), term()) -> {noreply, term()}. 
%-------------------------------------------------------------------------------
handle_cast(_Msg, State) -> 
    {noreply, State}.

%-------------------------------------------------------------------------------
% HANDLE_INFO/2
%
%-------------------------------------------------------------------------------
-spec handle_info(term(), term()) -> {noreply, term()}.
%-------------------------------------------------------------------------------
handle_info({tcp, Socket, RawData}, State) ->
    do_echo(Socket, RawData),
    {noreply, State}.

%-------------------------------------------------------------------------------
% TERMINATE/2
%
%-------------------------------------------------------------------------------
-spec terminate(term(), term()) -> ok. 
%-------------------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%-------------------------------------------------------------------------------
% CODE_CHANGE/3
%
%-------------------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%===============================================================================
%                                   PRIVATE 
%===============================================================================

%-------------------------------------------------------------------------------
% DO_ECHO/2
%
%-------------------------------------------------------------------------------
do_echo(Socket, RawData) -> 
    gen_tcp:send(Socket, RawData).
